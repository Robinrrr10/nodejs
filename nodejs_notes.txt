NodeJs:
------

Node js is platform to run nodejs application.

It is in javascript

It is used to read, write and delete files

It can easily connect to db

----


Installation:
------------
1. Download node js from official website and double click and install
2. Use below command to check whether node js is installed or not
node -v                 //This will show version of nodejs

To run application use below command
node filename
Eg: node app
or
node app.js

------

v8 engine:
---------

nodejs is internally written in c++
heart of nodejs is v8 engine
Nodejs will convert javascript code into machine code using v8 engine


---

global object:
-----------
console.log("")   //console is one of global object


setTimeout(functionName, milliSec) //This will call given function after given millisec
Eg:
setTimeout(myfunction, 4000)

setInterval(functionName, milliSec) //This will call given function in every interval of time
clearInterval(varName) //This is to clear the set Interval

Eg:
let time = 0
let timer = setInterval(function(){ //this is used to call function in every given interval
  time += 4
  console.log(time, " sec passed")
  if(time > 20) {
    clearInterval(timer)
  }
}, 

console.log(__dirname) //to show current directory
console.log(__filename) //To show current filename

---

function expression:
-------------------

taking function as a object/variable is called as function expression

//function expression
var hello = function(){
  console.log("helloooo");
}

hello();




function myfunctionDa(funcName){
  funcName();
}
var pen = function(){
  console.log("pennn");
}


---

module and require():
-------------------
require('givePathOfImportingFile')       //This is used to import other js files/function
module.exports = giveFunctionOrVariableName   //Here we will give what function can be exported and used outside


Eg:
in file1.js:
var count = function(arr){
  return 'length is: ' + arr.length;
};

module.exports = count;      //This is used export count  function outside this file as well


in file2.js
var counter = require('./file1'); //file name. no need of .js //This is used to import

console.log(counter([34, 23, 12, 44]))


---


module pattern (Exporting multiple functions or variables):
--------------

module.exports.name1 = variableOrFunctionName1   //set each properties for function or variable to export
module.exports.name2 = variableOrFunctionName2
module.exports.name3 = variableOrFunctionName3

or

module.exports = {       //set each properties for function or variable to export
name1: variableOrFunctionName1,
name2: variableOrFunctionName2,
name3: variableOrFunctionName3
}



Eg:

var count = function(arr){
  return 'length is' + arr.length;
}

var add = function(a, b) {
  return `addition result is ${a+b}`
}

var name = "dinesh";

module.exports.count = count;
module.exports.addition = add;
module.exports.user = name;

or

module.exports = {
  count: count,
  addition: add,
  customer: name
}

---

Event module:
-----------


EventEmitter:



var events = require('events'); //event is inbuild module in NodeJs

var myEmitter = new events.EventEmitter(); //EventEmitter is used to create new event

myEmitter.on('perform', function(message){ //here 'perform' action is created with one function takes one param //this is created using on
  console.log(message)
})

myEmitter.emit('perform', 'do something here') //Here perform action is called with another param which will be used in previously created function


-------

inheriting EventEmitter:

var events = require('events');
var util = require('util'); //util has different utils as like inherits etc

var Person = function(name){
  this.name = name;
}

util.inherits(Person, events.EventEmitter) //inherit is used to inherit. Here i inherited EventEmitter to use in Person

var ram = new Person('Ram')
var raja = new Person('Raja')
var babu = new Person('babu')

var allPeople = [ram, raja, babu]

allPeople.forEach(function(eachPer){
  eachPer.on('speak', function(msg){ //as i already inherited EventEmitter, i can use on function here// Here i created speak action with an function which takes message
    console.log(eachPer.name + " said: " + msg);
  })
});

ram.emit('speak', 'hello') //as i used for all object in array, speak will work for all obj in array
raja.emit('speak', 'hi man')
babu.emit('speak', 'my message da')



-----------


Reading and writing the file:
----------------------------

var fs = require('fs') //fs is node js inbuild package which is used for file operation like reading and writing

var strs = fs.readFileSync('tutorial6SampleFile4.txt', 'utf8'); //This is used to  read the file. Given filename and its format to return// It will read as binary. as utf is used it will return as text
//above is sync operation. so it will wait until it reads
console.log(strs);

var mystr = "this is my content to write da";
fs.writeFileSync('tutorial6SampleFile5.txt', mystr); // this is used to write content to  file. passed file name and content
//above is sync operation. so it will wait until it writes the file


//Below has async operation
console.log("Async::");

fs.readFile('tutorial6SampleFile4.txt', 'utf8', function(err, data){ //this is used to read. but this is async, it wont wait, it will just move to next line even though reading is in progress
  console.log("reading completed:" + data); //in above we have given file name, format and callback function
})

console.log("Reading is above. but still this line is executed as this async")

fs.writeFile('tutorial6SampleFile6.txt', mystr, function(){ //This used to write the file. This is async. so wont wait, even this is in progress, it will move to next line
  console.log("writing completed:") //in above we have given file name, content and callback function
});

console.log("Writing is above. but still this line is executed as this async")


---

To remove file:
--------------
fs.unlinkSync('filename')//this is used to remove the file
fs.unlink('filename') //This will remove the file using asycn method
//if file is not there, it will throw error


---


Creating and removing directory:
---------------------------------

fs.mkdirSync('nameofdirectory') //creating directory
fs.mkdir('nameofdirectory', ) //async method to create directory

fs.rmdirSync('nameofdirector') //to remove directory
fs.rmdir('nameofdirector') //async method to remove directory
//directory can be removed only if directory is empty.
If it is not empty it will throw error. in such case we need to remove the files inside directory, then we have to remove

-------------------------

below understand would be better:
-------------------------------
client server
protocols
ports


------------------------


creating server:
----------------

var http = require('http') //this http package contains all http related utils

var server = http.createServer(function(req, res){    //to create server
  console.log("End point called:" + req.url); //req.url is ther url from request
  res.writeHead(200, {'Content-Type': 'text/plain'}); //to add status code and headers
  res.end("Hi man"); //to add response body
});

server.listen(3000, '127.0.0.1');       //To run server in ip and port. so server will listen in this port
console.log('Listening port 3000');



--------------------------

buffer:
------
Sending large data into part by part and transfer to other


Stream:
-------
Continuously sending data to other place

To send large data, it will send part by part continously 


Writable streams: //used to write part by part
Allow node js to write data to a stream

Readable stream: //used to read part by part
Allow node js to read data from a stream

Duplex:
can read and write to a stream

----

Readable stream example:
----------------------

var fs = require('fs')
var file = __dirname + '/tutorial9SampleFile1.txt'
var myReadStream = fs.createReadStream(file, 'utf8'); //this is used to create read stream //Here we given file name and format

myReadStream.on('data', function(chunk){     // data event will used to read in part by part
  console.log("READING EACH CHUNK::::::::::::::::::::::::::::::");
  console.log(chunk);
});



-----------

Read and then Writable steam example:

var fs = require('fs')
var file = __dirname + '/tutorial9SampleFile1.txt'
var myReadStream = fs.createReadStream(file, 'utf8'); //this is used to create read stream //Here we given file name and format

myReadStream.on('data', function(chunk){     //this will used to read in part by part
  console.log("READING EACH CHUNK::::::::::::::::::::::::::::::");
  console.log(chunk);
});


------

Pipes:
------
Pipe is used to write the data part by part as like above


Eg:

var fs = require('fs');

var readStream = fs.createReadStream(__dirname + '/tutorial11SampleFile1.txt', 'utf8');
var writeStream = fs.createWriteStream(__dirname + '/tutorial11SampleFile2.txt');

readStream.pipe(writeStream); //This will write the data part by part


Eg:

var http = require('http');
var fs = require('fs');

var server = http.createServer(function(req, res){
  console.log('request received');
  res.writeHead(200, {'Content-Type': 'text/plain'});
  var readStr = fs.createReadStream(__dirname + '/tutorial12SampleFile1.txt', 'utf8');
  readStr.pipe(res); //This will send the data to client part by part
});

server.listen(3000, '127.0.0.1');
console.log('Server started');
console.log('Listening to port 3000.......');


------------


Serving html page:
-------
change Content-Type as text/html


Eg:
var http = require('http');
var fs = require('fs');

var server = http.createServer(function(req, res){
  console.log("Made request");
  res.writeHead(200, {'Content-Type':'text/html'});
  var myReadStream = fs.createReadStream(__dirname + '/tutorial13index.html', 'utf8');
  myReadStream.pipe(res);
});

server.listen(3000, '127.0.0.1');
console.log("Listening to port 3000");


-----

Serving json
------------


JSON.stringify(object)  //use this to convert object to json



Eg:

var http = require('http');

var server = http.createServer(function(req, res){
  console.log("called this");
  res.writeHead(200, {'Content-Type': 'application/json'});
  var myObj = {
    name: 'Ram',
    dept: 'cse',
    age: 28
  };
  res.end(JSON.stringify(myObj));
});

server.listen(3000, '127.0.0.1')
console.log("listening to port 3000...")

-------

Basic routing:
------------

Eg:

var http = require('http');
var fs = require('fs');

var server = http.createServer(function(req, res){
  console.log("url:" + req.url)
  if(req.url === '/home' || req.url === '/'){
    res.writeHead(200, {'Content-Type': 'text/html'});
    fs.createReadStream(__dirname + '/tutorial15index.html').pipe(res);
  } else if(req.url === '/contact'){
    res.writeHead(200, {'Content-Type': 'text/html'});
    fs.createReadStream(__dirname + '/tutorial15contact.html').pipe(res);
  } else {
    res.writeHead(404, {'Content-Type': 'text/html'});
    fs.createReadStream(__dirname + '/tutorial15notfound.html').pipe(res);
  }

});

server.listen(3000, '127.0.0.1')
console.log("Listening on port 3000....")



----


Node package manager(npm):
-------------

https://www.npmjs.com

In this website we can search for all open source package of npm.
This will give command to install and uninstall package.
Also this will give repo link as well for those open source packages


we can use this libraries to add in application after installation


---


package.json file:
---

npm init //this will get few inputes and used to create fresh application
This will also add package.json


npm install express - save //sample command to install some package and save this as dependencies in package.json as like below
Eg:
  "dependencies": {
    "express": "^4.17.2"
  }

once we uninstall the package it will be removed. This is like depencies

npm install     //This will download dependencies and build the application



---------
